// @flow

const { logger } = require('@lagoon/commons/src/local-logging');
const { addProblem, deleteProblemsFromSource } = require('@lagoon/commons/src/api');
const { sendToLagoonLogs } = require('@lagoon/commons/src/logs');
const HARBOUR_VULNERABILITY_SOURCE = 'Harbor';


async function processHarborVulnerabilityList(webhook: WebhookRequestData, channelWrapperWebhooks) {
  const {
    webhooktype,
    event,
    uuid,
    body
  } = webhook;

  const {
    lagoonProjectId,
    lagoonEnvironmentId,
    vulnerabilities
  } = body;

  deleteProblemsFromSource(lagoonEnvironmentId, HARBOUR_VULNERABILITY_SOURCE);
  vulnerabilities.forEach(element => {
    addProblem({
      environment: lagoonEnvironmentId,
      identifier: element.id,
      severity: element.severity.toUpperCase(),
      source: HARBOUR_VULNERABILITY_SOURCE,
      description: element.description,
      links: element.links.pop(),
      data: JSON.stringify(element),
      version: element.version,
      fixed_version: element.fix_version,
    }).catch(error => sendToLagoonLogs(
      'error',
      '',
      uuid,
      `${webhooktype}:${event}:problem_insert_error`,
      { data: body },
      `Error inserting problem id ${element.id} for ${lagoonProjectId}:${lagoonEnvironmentId} -- ${error.message}`
      ));
    });
  }

module.exports = processHarborVulnerabilityList;